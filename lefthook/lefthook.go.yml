---
# EXAMPLE USAGE
# Refer for explanation to following link:
# https://github.com/evilmartians/lefthook/blob/master/docs/full_guide.md
#
# This will run the key security checks that will have redacted secrets on output
ci-checks:
  commands:

pre-push:
  commands:
    gitleaks:
      tags: security gotool
      name: gitleaks-scan
      run: gitleaks --pretty --exclude-forks --config=.gitleaks.toml --depth=1  -v
    gopherbadge:
      tags: docs tests go
      name: update gopherbadge
      run: |
        go test  ./... -coverprofile ./artifacts/cover.out
        go tool cover -html=./artifacts/cover.out -o ./artifacts/coverage.html
        gopherbadger -md="README.md,coverage.md"
        git add README.md && git commit --amend --no-edit README.md
        git add coverage.md && git commit --amend --no-edit coverage.md
    # using semver which is installed as go tool
    semver:
      tags: semver
      name: semver version update
      run: |
        semver up alpha
        git add .sever.yaml && git commit --amend --no-edit .sever.yaml

pre-commit:
  parallel: true
  tags: go lint
  commands:
    lint:
      tags: gotool
      run: golangci-lint run ./... --config .golangci.yml --fix

    # gofumpt:
    #   tags: gotool
    #   name: gofumpt
    #   run: gofumpt -l -w .
    # goimports:
    #   tags: gotool
    #   name: goimports
    #   run: goimports -w .
    # # conventionalcommits:
    # #   tags: commit documentation
    # #   name: message uses conventional commit format
    # #   # run: commitsar
    # #   run: docker run --rm --name="commitsar" -w /src -v ${PWD}:/src aevea/commitsar
    # # conventionalcommits:
    # #   tags: commit documentation
    # #   name: message uses conventional commit format
    # #   # run: commitsar
    # #   run: docker run --rm peakfijn/commitlint -v ${PWD}:/app/ commitlint #{--volume ${PWD}/.git:/app/.git --volume ${PWD}/.commitlintrc:/app/.commitlintrc
    # #   docker run --rm --name="commitsar2" -w /src -v ${PWD}:/src commitsar/commitsar:latest
    # #   docker pull commitsar/commitsar:latest
    # # revive:
    # #   tags: gotool
    # #   name: revive
    # #   run: revive -config revive.toml --formatter friendly
    # govet:
    #   tags: backend style
    #   files: git ls-files -m
    #   glob: '*.go'
    #   run: go vet {files}
